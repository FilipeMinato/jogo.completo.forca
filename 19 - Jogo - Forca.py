# Jogo da Forca com Interface Gr√°fica
# O jogador tenta adivinhar uma palavra secreta letra por letra.
# S√£o permitidas at√© 6 tentativas incorretas.
# A interface √© feita com Tkinter.

import tkinter as tk
from tkinter import messagebox
import random
import unicodedata

# ===============================
# Lista de palavras do jogo
# ===============================
# Temas variados: futebol, F1, economia, pol√≠tica, geografia, hist√≥ria...
lista_original = [
    'campeonato','goleiro','zagueiro','penalidade','escanteio','cart√£o','drible','torcida','uniforme','chuteira',
    'trave','gramado','falta','tecnico','volante','atacante','meio','estadio','escala√ß√£o','tabela','passe',
    'marca√ß√£o','substitui√ß√£o','impedimento','rebaixamento','lideran√ßa','largada','p√≥dio','corrida','pneu','motor',
    'aerodin√¢mica','freio','volante','curva','boxe','combust√≠vel','parada','tempo','classifica√ß√£o','acelera√ß√£o',
    'velocidade','ultrapassagem','pista','acidente','bandeira','pole','treino','v√°cuo','retardat√°rio','equil√≠brio',
    'infla√ß√£o','juros','c√¢mbio','balan√ßo','a√ß√µes','divida','lucro','cr√©dito','investimento','sal√°rio','tributo',
    'banco','mercado','consumo','produto','capital','renda','importa√ß√£o','exporta√ß√£o','demanda','oferta',
    'recess√£o','d√©ficit','super√°vit','carteira','governo','pol√≠tica','democracia','ditadura','revolu√ß√£o',
    'constitui√ß√£o','congresso','parlamento','ministro','ex√©rcito','voto','urna','protesto','imposto','presid√™ncia',
    'nacionalismo','guerra','alian√ßa','colonialismo','imperialismo','reforma','movimento','crise','poder',
    'territ√≥rio','planeta','continente','oceano','cordilheira','plan√≠cie','deserto','floresta','rio','montanha',
    'vulc√£o','clima','latitude','longitude','altitude','b√∫ssola','mapa','regi√£o','costa','ilha','fronteira',
    'tr√≥pico','hemisf√©rio','reserva','cachoeira','caverna','imp√©rio','cavalo','feudalismo','idade','castelo',
    'armadura','nobreza','servid√£o','caravela','navega√ß√£o','coloniza√ß√£o','escravid√£o','ind√∫stria','renascimento',
    'inven√ß√£o','ci√™ncia','progresso','iluminismo','rep√∫blica','monarquia','descobrimento','tradi√ß√£o','costume',
    'evento'
]

# Lista embaralhada de palavras dispon√≠veis
palavras_disponiveis = []

# Vari√°veis do jogo
tentativas = 6  # Tentativas restantes
palavra = ""  # Palavra sorteada
letras_descobertas = []  # Letras corretas j√° reveladas


# ===============================
# Fun√ß√µes do jogo
# ===============================

def remover_acentos(txt):
    """
    Remove acentos da palavra para facilitar a compara√ß√£o.
    Ex: '√©' vira 'e', '√£' vira 'a'
    """
    return ''.join(c for c in unicodedata.normalize('NFD', txt) if unicodedata.category(c) != 'Mn')

def sortear_palavra():
    """
    Sorteia uma nova palavra da lista original, sem repetir at√© esgotar.
    """
    global palavras_disponiveis
    if not palavras_disponiveis:
        palavras_disponiveis = lista_original[:]
        random.shuffle(palavras_disponiveis)
    return palavras_disponiveis.pop()

def iniciar_jogo():
    """
    Inicia um novo jogo: sorteia palavra, reseta tentativas e letras descobertas.
    """
    global palavra, letras_descobertas, tentativas
    palavra = sortear_palavra()
    letras_descobertas = ['_' for _ in palavra]
    tentativas = 6
    atualizar_textos()

def atualizar_textos():
    """
    Atualiza os textos da interface: palavra parcial e tentativas restantes.
    """
    texto_palavra.config(text=' '.join(letras_descobertas))
    texto_tentativas.config(text=f'üß† Voc√™ ainda tem {tentativas} chance(s)!')

def verificar_letra():
    """
    Verifica se a letra digitada est√° correta. Atualiza tentativas e a interface.
    """
    global tentativas
    letra_digitada = campo_letra.get().lower()  # Captura o texto digitado
    campo_letra.delete(0, tk.END)  # Limpa o campo ap√≥s envio

    # Valida√ß√£o: apenas uma letra do alfabeto
    if len(letra_digitada) != 1 or not letra_digitada.isalpha():
        messagebox.showwarning("üö® Aten√ß√£o!", "Digite apenas UMA letra do alfabeto.")
        return

    # Verifica se a letra aparece na palavra
    acertou = False
    for i, letra_real in enumerate(palavra):
        if remover_acentos(letra_real) == remover_acentos(letra_digitada):
            letras_descobertas[i] = letra_real
            acertou = True

    # Se n√£o acertou, perde uma tentativa
    if not acertou:
        tentativas -= 1

    # Atualiza os textos na interface
    atualizar_textos()

    # Vit√≥ria: n√£o h√° mais letras ocultas
    if '_' not in letras_descobertas:
        jogar_novamente = messagebox.askyesno("üéâ Parab√©ns!", f"Voc√™ acertou! A palavra era '{palavra}'.\n\nDeseja jogar novamente?")
        if jogar_novamente:
            iniciar_jogo()
        else:
            janela.destroy()

    # Derrota: acabou as tentativas
    elif tentativas == 0:
        jogar_novamente = messagebox.askyesno("üíÄ Fim de jogo", f"Suas chances acabaram. A palavra era '{palavra}'.\n\nDeseja tentar de novo?")
        if jogar_novamente:
            iniciar_jogo()
        else:
            janela.destroy()


# ===============================
# Interface Gr√°fica com Tkinter
# ===============================

# Janela principal
janela = tk.Tk()
janela.title("ü™Ç Jogo da Forca - Mostre seu vocabul√°rio!")
janela.geometry("460x360")
janela.resizable(False, False)

# Texto de explica√ß√£o do jogo
explicacao = tk.Label(
    janela,
    text="üí° Adivinhe a palavra secreta, uma letra por vez!\n"
         "Voc√™ tem 6 chances. Cada erro custa uma tentativa.\n"
         "Pode
